import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Perceptron class
class Perceptron:
    def __init__(self, rate=0.01, n_iter=10):
        self.rate = rate
        self.n_iter = n_iter

    def fit(self, X, y):
        """Fit the training data."""
        self.weights = np.zeros(1 + X.shape[1])  # Initialize weights
        self.errors = []  # Track misclassification errors

        for _ in range(self.n_iter):
            errors = 0
            for xi, target in zip(X, y):
                update = self.rate * (target - self.predict(xi))
                self.weights[1:] += update * xi
                self.weights[0] += update  # Bias update
                errors += int(update != 0.0)
            self.errors.append(errors)
        return self

    def net_input(self, X):
        """Calculate net input."""
        return np.dot(X, self.weights[1:]) + self.weights[0]

    def predict(self, X):
        """Return class label after unit step."""
        return np.where(self.net_input(X) >= 0.0, 1, -1)

# Load the dataset
df = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data', header=None)

# Extract the first 100 samples (Setosa and Versicolor) and the two features
y = df.iloc[0:100, 4].values
y = np.where(y == 'Iris-setosa', -1, 1)
X = df.iloc[0:100, [0, 2]].values  # Sepal length and petal length

# Visualize the data
plt.scatter(X[:50, 0], X[:50, 1], color='red', marker='o', label='Setosa')
plt.scatter(X[50:100, 0], X[50:100, 1], color='blue', marker='x', label='Versicolor')
plt.xlabel('Sepal length')
plt.ylabel('Petal length')
plt.legend(loc='upper left')
plt.show()

# Train the perceptron
ppn = Perceptron(rate=0.1, n_iter=10)
ppn.fit(X, y)

# Plot the errors over iterations
plt.plot(range(1, len(ppn.errors) + 1), ppn.errors, marker='o')
plt.xlabel('Epochs')
plt.ylabel('Number of updates')
plt.show()
