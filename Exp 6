from tensorflow.keras.preprocessing import text_dataset_from_directory
from tensorflow.strings import regex_replace
from tensorflow.keras.layers.experimental.preprocessing import TextVectorization
from tensorflow.keras.models import Sequential
from tensorflow.keras import Input
from tensorflow.keras.layers import Dense, LSTM, Embedding, Dropout

def prepareData(dir):
    data = text_dataset_from_directory(dir)
    return data.map(lambda text, label: (regex_replace(text, '<br />', ' '), label))

train_data = prepareData('./train')
test_data = prepareData('./test')

for text_batch, label_batch in train_data.take(1):
    print(text_batch.numpy()[0])
    print(label_batch.numpy()[0])  # 0 = negative, 1 = positive

model = Sequential()

# Input layer
model.add(Input(shape=(1,), dtype="string"))

# Text Vectorization
max_tokens = 1000
max_len = 100
vectorize_layer = TextVectorization(
    max_tokens=max_tokens,
    output_mode="int",
    output_sequence_length=max_len,
)
train_texts = train_data.map(lambda text, label: text)
vectorize_layer.adapt(train_texts)
model.add(vectorize_layer)

# Embedding layer
model.add(Embedding(max_tokens + 1, 128))

# LSTM layer
model.add(LSTM(64))

# Dense hidden layer
model.add(Dense(64, activation="relu"))

# Output layer
model.add(Dense(1, activation="sigmoid"))

# Compile and train the model
model.compile(loss="binary_crossentropy", optimizer="adam", metrics=["accuracy"])
model.fit(train_data, epochs=10)

# Save and load model weights
model.save_weights('rnn')
model.load_weights('rnn')

# Evaluate the model
model.evaluate(test_data)

# Make predictions
print(model.predict(["i loved it! highly recommend it to anyone and everyone looking for a great movie to watch."]))
print(model.predict(["this was awful! i hated it so much, nobody should watch this. the acting was terrible, the music was terrible, overall it was just bad."]))
